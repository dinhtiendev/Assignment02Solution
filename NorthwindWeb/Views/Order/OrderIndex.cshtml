@model IEnumerable<NorthwindWeb.Models.OrderDto>
@using NorthwindWeb.Models

@{
    // Convert ListOrder to a JSON string
    var ordersJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}



<div class="container p-4 border">
    <div class="row pb-2">
        <div class="col">
            <h1 class="text-primary">Orders List</h1>
        </div>
        <div class="col text-end pt-1">
            <a asp-action="OrderCreate" class="btn btn-outline-primary"> Create New Order</a>
        </div>
    </div>
    <form asp-action="OrderIndex">
        <div class="col-md-4 mb-3">
            <label for="orderDate">Filter by Order Date:</label>
            @if (ViewData["orderDate"] == null)
            {
                <input type="date" name="orderDate" class="form-control">
            }
            else
            {
                <input type="date" name="orderDate" value="@((String)ViewData["orderDate"])" class="form-control">
            }
        </div>
        <div class="col-md-2 mb-3">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </form>
    <table id="orderTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    EmployeeId
                </th>
                <th>
                    CustomerId
                </th>
                <th>
                    OrderDate
                </th>
                <th>
                    List of Product (ProductId - Quantity - UnitPrice)
                </th>
                <th>
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            <!-- Table body will be dynamically generated by JavaScript -->
        </tbody>
    </table>
</div>

<div id="pagination"></div>


<script>
    var orders = @Html.Raw(ordersJson);

    // Variables for pagination
    var currentPage = 1;
    var ordersPerPage = 10;

    // Display initial page
    displayOrders(currentPage);

    // Generate pagination buttons
    generatePagination(orders.length, ordersPerPage, currentPage);

    // Function to display orders for a specific page
    function displayOrders(page) {
        // Calculate starting and ending indexes for the orders to display
        var startIndex = (page - 1) * ordersPerPage;
        var endIndex = startIndex + ordersPerPage;
        var ordersToDisplay = orders.slice(startIndex, endIndex);

        // Clear existing order table body
        var orderTableBody = document.querySelector('#orderTable tbody');
        orderTableBody.innerHTML = '';

        // Generate HTML for orders to display
        for (var i = 0; i < ordersToDisplay.length; i++) {
            var order = ordersToDisplay[i];
            var orderRow = `
                <tr>
                    <td>${order.OrderId}</td>
                    <td>${order.EmployeeId}</td>
                    <td>${order.CustomerId}</td>
                    <td>${order.OrderDate}</td>
                    <td>
                        <ul class="list-unstyled">
                            ${generateProductList(order.ListOfProduct)}
                        </ul>
                    </td>
                    <td>
                        <a class="btn btn-success" href="/Order/OrderEdit/${order.OrderId}">Edit</a>
                        <a class="btn btn-danger" href="/Order/OrderDelete/${order.OrderId}">Delete</a>
                    </td>
                </tr>
            `;
            orderTableBody.innerHTML += orderRow;
        }
    }

    // Function to generate HTML for product list
    function generateProductList(products) {
        var productList = '';
        for (var i = 0; i < products.length; i++) {
            var product = products[i];
            productList += `<li>${product.ProductId} - ${product.Quantity} - ${product.UnitPrice}</li>`;
        }
        return productList;
    }

    // Function to generate pagination buttons
    // Function to generate pagination buttons
    function generatePagination(totalOrders, ordersPerPage, currentPage) {
        var totalPages = Math.ceil(totalOrders / ordersPerPage);
        var paginationHTML = '';

        // Check if total pages is less than or equal to 1
        if (totalPages <= 1) {
            // No need to generate pagination buttons
            document.getElementById('pagination').innerHTML = '';
            return;
        }
        // Generate HTML for pagination buttons
        paginationHTML += `
        <button class="btn btn-primary" data-page="1">First</button>
        <button class="btn btn-primary" data-page="${currentPage - 1}">Previous</button>
    `;
        for (var page = currentPage - 2; page <= currentPage + 2; page++) {
            if (page > 0 && page <= totalPages) {
                if (page === currentPage) {
                    paginationHTML += `<button class="btn btn-primary active" data-page="${page}">${page}</button>`;
                } else {
                    paginationHTML += `<button class="btn btn-primary" data-page="${page}">${page}</button>`;
                }
            }
        }
        paginationHTML += `
        <button class="btn btn-primary" data-page="${currentPage + 1}">Next</button>
        <button class="btn btn-primary" data-page="${totalPages}">Last</button>
    `;

        // Set the pagination HTML to the pagination div
        document.getElementById('pagination').innerHTML = paginationHTML;

        // Add event listeners to pagination buttons
        var paginationButtons = document.getElementById('pagination').getElementsByTagName('button');
        for (var i = 0; i < paginationButtons.length; i++) {
            paginationButtons[i].addEventListener('click', function (event) {
                var page = parseInt(event.target.dataset.page);
                if (!isNaN(page)) {
                    currentPage = page;
                    displayOrders(currentPage);
                    generatePagination(totalOrders, ordersPerPage, currentPage);
                }
            });
        }
    }
</script>